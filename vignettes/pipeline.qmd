---
title: "Brassens pipeline"
format: html
editor: visual
---

The following code generates clean CWS data on the Triangle.

#### Load brassens library

```{r}
devtools::load_all()
```

#### Open Triangle data

```{r}
nc_shp <- paste0(
  "../input/NC_county_boundary/",
  "North_Carolina_State_and_County_Boundary_Polygons.shp"
) |>
  terra::vect()
counties <- c("Wake", "Orange", "Durham", "Chatham", "Granville")
rtp_poly <- nc_shp[which(nc_shp$County %in% counties), ] |>
  terra::project("epsg:4326")
wake_poly <- nc_shp[which(nc_shp$County %in% "Wake"), ]
p <- "../input/weatherunderground/Raleigh_Stations_inventory.csv"
ral_inv <- read.csv(p) |>
  sf::st_as_sf(coords = c("lon", "lat"), crs = 4326, remove = FALSE)
ral_inv$ts_utc <- as.POSIXct(ral_inv$ts_utc, tz = "UTC")
ral_inv$te_utc <- as.POSIXct(ral_inv$te_utc, tz = "UTC")
```

#### Create configuration list for the pipeline

```{r}
config <- list(
  ts = as.POSIXct("2021-07-22 00:00:00", tz = "UTC"),
  te = as.POSIXct("2021-07-23 23:59:59", tz = "UTC"),
  area = rtp_poly,
  wu_inv = ral_inv,
  # following can be NULL ---> load_pa() calls to download_pa()
  pa_file = "./input/rtp/pa_20210720_20210727.csv"
)
```

#### Raw data (for final comparison)

```{r}
setwd("../")
wu_raw <- load_wu(config$ts, config$te, config$area, config$wu_inv) |>
  format_wu()

pa_raw <- load_pa(
  ts = config$ts,
  te = config$te,
  area = config$area,
  storage_file = config$pa_file
) |>
  format_pa()
```

#### Whole pipeline

```{r}
setwd("../")
ghcnh <- download_ghcnh(config$ts, config$te, config$area)

wu_list <- load_wu(config$ts, config$te, config$area, config$wu_inv) |>
  format_wu() |>
  clean_cws() |>
  calib_cws(ref = ghcnh, max_dist = 20000)

pa_list <- load_pa(
  ts = config$ts,
  te = config$te,
  area = config$area,
  storage_file = config$pa_file
) |>
  format_pa() |>
  clean_cws() |>
  calib_cws(ref = ghcnh, max_dist = 20000)
```

#### Map cleaned data on RTP on the 2021-07-23 at 6am (local time)

```{r}
wu <- wu_list$obs
pa <- pa_list$obs
cws <- rbind(wu, pa)
cws_raw <- rbind(wu_raw, pa_raw)
timestamp <- as.POSIXct("2021-07-23 06:00:00", tz = "America/New_York")
imp <- terra::rast("../input/rtp_imp.tif") |>
  terra::project("EPSG:4326")
```

```{r}
map <- map_observations_imp(cws,
  temp_cal,
  imp,
  date = timestamp,
  c(
    "WU" = 17,
    "PA" = 18,
    "NCEI/ASOS/AWOS" = 16,
    "NCEI/US CRN" = 15
  ),
  "Weather Underground and PurpleAir"
)
map
```

```{r}
ggsave(
  plot = map,
  filename = "../graphs/map_wu_pa_cleaned_am_heatwatch.png",
  width = 7,
  height = 6,
  dpi = 300
)
```

Plot raw data

```{r}
p <- plot_ts_net(cws_raw, ts = config$ts, te = config$te)
p
ggsave(
  plot = p,
  filename = "../graphs/ts_cws_raw.png",
  width = 7,
  height = 4,
  dpi = 300
)
```

Plot before calibration

```{r}
p <- plot_ts_net(cws, ts = config$ts, te = config$te)
p
ggsave(
  plot = p,
  filename = "../graphs/ts_cws_cleaned.png",
  width = 7,
  height = 4,
  dpi = 300
)
```

Plot after calibration

```{r}
data <- cws
ts <- config$ts
te <- config$te
min <- floor(quantile(data$temp_cal,
  na.rm = TRUE,
  probs = 0.01
))
max <- ceiling(quantile(data$temp_cal,
  na.rm = TRUE,
  probs = 1
))
p <- ggplot2::ggplot(
  data,
  aes(
    x = time,
    y = temp_cal,
    group = as.factor(site_id),
    color = network
  )
) +
  geom_line() +
  scale_x_datetime(
    date_labels = "%m-%d %Hh",
    date_breaks = "6 hours",
    date_minor_breaks = "1 hour",
    limits = c(ts, te)
  ) +
  scale_y_continuous(
    breaks = seq(min, max, by = 5),
    minor_breaks = seq(min, max, by = 1),
    limits = c(min, max)
  ) +
  theme(
    axis.text = element_text(size = 12),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    plot.caption = element_text(size = 10),
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 12),
    panel.background = element_rect(fill = "white"),
    panel.grid.major = element_line(colour = "grey"),
    panel.grid.minor = element_line(colour = "azure2"),
    legend.position = "right"
  )
p
p
ggsave(
  plot = p,
  filename = "../graphs/ts_cws_cleaned_calibrated.png",
  width = 7,
  height = 4,
  dpi = 300
)
```

Save cleaned and calibrated cws data in .rds file for mercury analysis

```{r}
saveRDS(cws, file = paste0(
  "../output/cws_rtp_cleaned_calibrated_",
  lubridate::date(config$ts),
  "_",
  lubridate::date(config$te),
  ".rds"
))
```
