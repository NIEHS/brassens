---
title: "Measurement error of citizen weather stations" 
format: html
editor: visual
author: "Eva Marques"
---

## Open RTP data

citizen weather stations data + ref measurements + RTP polygons

```{r}
devtools::load_all()
rtp <- load_rtp_observations()
cws <- rtp$cws
ref <- rtp$ref
ref <- ref[which(ref$network != "HEATWATCH"), ]
poly <- rtp$poly
```

## Compute measurement error

```{r}
cws_err <- add_temp_reference(cws, ref)
hist(cws_err$dist_to_ref)
hist(cws_err[which(cws_err$network == "WU" & cws_err$temp_err > -10), ]$temp_err)
hist(cws_err[which(cws_err$network == "PA"), ]$temp_err)
```

```{r}
imp <- terra::rast("../input/rtp_imp.tif") |>
  terra::project("EPSG:4326")
date <- as.POSIXct("2021-07-21 00:00:00", tz = "EST")
map_observations_imp(cws_err,
                     dist_to_ref,
                     imp,
                     date,
                     shape_values = c("PA" = 16, "WU" = 17),
                     "Imperviousness and reference networks")
```

Measurement error per hour

```{r}
hourly_summary_boxplots <- function(data, var) {
  min <- floor(quantile(data[[deparse(substitute(var))]],
    na.rm = TRUE,
    probs = 0.01
  ))
  max <- ceiling(quantile(data[[deparse(substitute(var))]],
    na.rm = TRUE,
    probs = 0.997
  ))
  ggplot(
    data = data,
    aes(
      x = network,
      y = {{ var }},
      color = network,
      group = network
    )
  ) +
    geom_hline(yintercept = 0, color = "red") +
    geom_hline(yintercept = -1, color = "blue", linetype = "dashed") +
    geom_hline(yintercept = 1, color = "blue", linetype = "dashed") +
    geom_boxplot(outlier.shape = 3, fill = "white", width = .8) +
    facet_wrap(~ hour, ncol = 12) +
    scale_y_continuous(
      breaks = seq(min, max, by = 5),
      minor_breaks = seq(min, max, by = 1),
      limits = c(min, max)
    ) +
    theme(
      axis.text = element_text(size = 12),
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
      plot.caption = element_text(size = 10),
      legend.text = element_text(size = 12),
      legend.title = element_text(size = 12),
      panel.background = element_rect(fill = "gray95"),
      panel.grid.major = element_line(colour = "grey"),
      panel.grid.minor = element_line(colour = "white"),
      legend.position = "none"
    )
}
```

```{r}
h_summary <- cws_err 
h_summary$hour <- lubridate::hour(h_summary$time)
h_summary <- h_summary |>
    dplyr::group_by(site_id, geometry, network, hour, dist_to_ref) |>
    dplyr::summarise(temp_err = median(temp_err, na.rm = TRUE)) |>
    dplyr::ungroup() |>
    as.data.frame()

p <- hourly_summary_boxplots(h_summary[which(h_summary$dist_to_ref <= 10000),], temp_err)
p
ggsave(plot = p,
       filename = "../graphs/boxplot_hourly_summary_error.png",
       width = 10,
       height = 6,
       dpi = 300)
```

Mean measurement error map (per stations, per network) ?

```{r}
map_error_hour <- function(data,
                           imp,
                           hour,
                           shape_values,
                           title) {
  pal <- c("blue", "white", "red")

  ggplot() +
    tidyterra::geom_spatraster(data = imp) +
    geom_sf(
      data = data[which(data$hour == hour), ],
      aes(geometry = geometry, color = temp_err, shape = network),
      size = 3,
    ) +
    #xlim(min(data$lon), max(data$lon)) +
    #ylim(min(data$lat), max(data$lat)) +
    scale_shape_manual(values = shape_values) +
    scale_color_gradientn(colours = pal, na.value = NA, limits = c(-8,8)) +
    scale_fill_gradientn(colours = c("white", "grey"), na.value = NA) +
    guides(fill = guide_legend(title = "Imperviousness (%)")) +
    labs(
      title = title,
    ) +
    ggspatial::annotation_scale(
      location = "bl", pad_x = unit(1, "cm"),
      pad_y = unit(1, "cm"),
      height = unit(0.30, "cm"),
      text_cex = 1
    ) +
    ggspatial::annotation_north_arrow(
      location = "br",
      which_north = "true",
      pad_x = unit(0.2, "cm"),
      pad_y = unit(0.2, "cm")
    ) +
    theme(
      axis.text = element_text(size = 12),
      plot.caption = element_text(size = 10),
      legend.text = element_text(size = 12),
      legend.title = element_text(size = 12),
      panel.background = element_rect(fill = "white"),
      panel.grid.major = element_line(colour = "grey")
    )
}
```

```{r}
map_error_hour(h_summary[which(h_summary$network == "PA"),],
               imp,
               15,
               c("PA" = 16, "WU" = 17),
               "Median error at 15UTC")
map_error_hour(h_summary[which(h_summary$network == "WU"),],
               imp,
               15,
               c("PA" = 16, "WU" = 17),
               "Median error at 15UTC")
map_error_hour(h_summary[which(h_summary$network == "WU"),],
               imp,
               8,
               c("PA" = 16, "WU" = 17),
               "Median error at 8UTC")

map_error_hour(h_summary[which(h_summary$network == "WU"),],
               imp,
               2,
               c("PA" = 16, "WU" = 17),
               "Median error at 2UTC")

map_error_hour(h_summary[which(h_summary$network == "WU"),],
               imp,
               3,
               c("PA" = 16, "WU" = 17),
               "Median error at 3UTC")

map_error_hour(h_summary[which(h_summary$network == "WU"),],
               imp,
               4,
               c("PA" = 16, "WU" = 17),
               "Median error at 4UTC")
```

Au moins pour voir si cest spatialise ou si y a des stations particulierement touchees.
