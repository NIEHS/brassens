---
title: "Request to download PurpleAir data"
format: html
editor: visual
---

```{r}
library(httr)
library(jsonlite)
```

## Step 1: Create an API key with a developer account

Create an account here: <https://develop.purpleair.com/>. Create a project and an API key. When you subscribe for the first time, you have 1,000,000 points for API calls. Once they're gone, you will have to purchase new points (see rate below on March 19th, 2023):

![](images/Screenshot 2024-03-19 at 9.56.57 AM.png){width="305"}

```{r}
api_key <- "F44618DC-D5AF-11EE-A056-42010A80000C"
# Set variables
start_ts <- as.POSIXct("2024-01-21 00:00:00", tz = "UTC")
end_ts <- as.POSIXct("2024-01-22 00:00:00", tz = "UTC")
api_key <- "F44618DC-D5AF-11EE-A056-42010A80000C"
sensor_index <- 47493
query_list <- list(start_timestamp = as.character(as.integer(start_ts)),
                   end_timestamp = as.character(as.integer(end_ts)),
                   average = "60",
                   fields = "temperature, humidity, pm2.5_alt")
url_base <- paste0('https://api.purpleair.com/v1/sensors/', sensor_index, "/history") 

# GET PurpleAir sensor history data
r_temp <- httr::GET(
url = url_base,
query = query_list,
config = add_headers("X-API-Key" = api_key)
)
r_temp
# Structurized data in form of R vectors and lists
r_parsed <- fromJSON(content(r_temp, as = "text"))
# Data frame from JSON data
r_dataframe <- as.data.frame(r_parsed$data)
colnames(r_dataframe) <- r_parsed$fields
r_dataframe$time_stamp <- as.POSIXct(r_dataframe$time_stamp,
                                     origin = "1970-01-01",
                                     tz = "UTC")
r_dataframe$data_time_stamp <- as.POSIXct(r_dataframe$data_time_stamp,
                                     origin = "1970-01-01",
                                     tz = "UTC")
r_dataframe
```

```{r}
nwlat <- 36.11
selat <- 35.6
nwlng <- -79.19
selng <- -78.3
api_key <- "F44618DC-D5AF-11EE-A056-42010A80000C"

query_list <- list(nwlng = nwlng,
                   nwlat = nwlat, 
                   selng = selng,
                   selat = selat, 
                   max_age = 0,
                   location_type = 0, # 0 = outside, 1 = inside
                   fields = "sensor_index,latitude, longitude, temperature, humidity")
url_base <- paste0('https://api.purpleair.com/v1/sensors/') 

# GET PurpleAir sensor history data
r_temp <- httr::GET(url = url_base,
                    query = query_list,
                    config = add_headers("X-API-Key" = api_key)
                    )
# Structurized data in form of R vectors and lists
r_parsed <- fromJSON(content(r_temp, as = "text"))
# Data frame from JSON data
r_dataframe <- as.data.frame(r_parsed$data)
colnames(r_dataframe) <- r_parsed$fields
head(r_dataframe)
```

## Step 2: API calls

In this section, you will use functions developed in this R library.

### Example #1: download current data of sensors in an area

```{r}
api_key <- "F44618DC-D5AF-11EE-A056-42010A80000C"
nwlat <-  36.11
selat <- 35.6
nwlng <- -79.19
selng <- -78.3
my_sensors <- find_sensors(nwlat,
                           selat,
                           nwlng,
                           selng,
                           api_key,
                           location_type = 0)
```

### Example #2: download history data of sensors in an area

```{r}
nwlat <-  36.11
selat <- 35.6
nwlng <- -79.19
selng <- -78.3
start_ts <- as.POSIXct("2021-06-01 00:00:00", tz = "EST")
end_ts <- as.POSIXct("2021-08-31 00:00:00", tz = "EST")
my_sensors_hist <- request_sensors_history(nwlat,
                                          selat,
                                          nwlng,
                                          selng,
                                          location_type = 0,
                                          start_ts,
                                          end_ts,
                                          api_key,
                                          average = "60",
                                          fields = "temperature, humidity")

```

Save data in a file

```{r}
write.csv(my_sensors_hist, "../input/rtp/pa_20210720_20210727.csv")
```

## Additional notes on PurpleAir PM2.5 sensors quality

Information about PM 2.5 variables: <https://community.purpleair.com/t/pm2-5-algorithms/3972/3>. There are 3 algorithms proposed to compute PM2.5 (pm2.5_alt, pm2.5_atm and pm2.5_cf_1). EPA suggested correction algorithms for atm and cf_1 versions to clean the data.
